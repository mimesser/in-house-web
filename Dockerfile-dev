FROM node:alpine as base_prod
ENV NEXT_TELEMETRY_DISABLED 1
ADD https://github.com/just-containers/s6-overlay/releases/download/v2.2.0.3/s6-overlay-amd64-installer /tmp/
RUN apk --purge del apk-tools \
    && addgroup -g 1001 -S nodejs \
    && adduser -S -G nodejs nextjs -u 1001 \
    && chmod +x /tmp/s6-overlay-amd64-installer \
    && /tmp/s6-overlay-amd64-installer /
ENTRYPOINT [ "/init" ]
WORKDIR /app

FROM node:alpine AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
ARG NODEENV
ENV NODE_ENV=$NODEENV
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci

FROM node:alpine AS builder
ARG APIURL
ARG GOPTIMIZEKEY
ARG GAKEY
ARG HOTJARSITEID
ARG SENTRYENV
ARG SENTRYDSN
ARG SENTRYCLIRCTOKEN
ARG NODEENV
ARG TCREATEENVFILE
ENV API_URL=$APIURL G_OPTIMIZE_KEY=$GOPTIMIZEKEY  GA_KEY=$GAKEY  HOTJAR_SITE_ID=$HOTJARSITEID  SENTRY_ENVIRONMENT=$SENTRYENV  SENTRY_DSN=$SENTRYDSN  SENTRYCLIRC_TOKEN=$SENTRYCLIRCTOKEN  NODE_ENV=$NODEENV  T_CREATE_ENV_FILE=$TCREATEENVFILE
WORKDIR /app
COPY . .
COPY --from=deps /app/node_modules ./node_modules
RUN apk add jq
RUN ./create_envfile $T_CREATE_ENV_FILE \
    && npm run build

FROM base_prod as final
ARG NODEENV
ENV NODE_ENV=$NODEENV
EXPOSE 3000
COPY --from=builder --chown=nextjs:nodejs /app/ ./
USER nextjs
CMD ["npm", "run", "next:dev"]
