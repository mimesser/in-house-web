trigger:
  branches:
    exclude:
      - develop
      - staging
      - prod

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '6a2d4758-82fc-4596-a4d5-95d61d37f09d'
  imageRepository: 'frontend'
  containerRegistry: 'inhousecr.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.SourceBranchName)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Validate Image
  jobs:
  - job: Build_and_Validate
    displayName: Build and Validate
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        arguments: '-f Dockerfile-dev --build-arg TCREATEENVFILE="d" --build-arg NODEENV="development" --build-arg SENTRYCLIRCTOKEN=$(SENTRYCLIRC_TOKEN) --build-arg APIURL=$(DEV_API_URL) --build-arg GOPTIMIZEKEY=$(DEV_G_OPTIMIZE_KEY) --build-arg GAKEY=$(DEV_GA_KEY) --build-arg HOTJARSITEID=$(DEV_HOTJAR_SITE_ID) --build-arg SENTRYDSN=$(SENTRYDSN)'
        repository: $(imageRepository)
        Dockerfile: $(dockerfilePath)
        tags: |
          $(tag)

#    - task: CmdLine@2
#      displayName: Scan for vulnerabilities
#      inputs:
#        script: |
#          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)